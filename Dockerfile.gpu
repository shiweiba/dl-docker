FROM buildpack-deps:stretch
FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04

# Install some dependencies
RUN apt-get update \
&& apt-get install -y bc \
                build-essential \
                cmake \
                curl \
                g++ \
                gfortran \
                git \
                libfreetype6-dev \
                libhdf5-dev \
                liblcms2-dev \
                libopenblas-dev \
                liblapack-dev \
                libwebp-dev \
                libzmq3-dev \
                nano \
                pkg-config \
                python-dev \
                python3-pip \
                unzip \
                vim \
                wget \
                zlib1g-dev \
                qt5-default \
                libvtk6-dev \
                zlib1g-dev \
                libopenexr-dev \
                libgdal-dev \
                libdc1394-22-dev \
                libavcodec-dev \
                libavformat-dev \
                libswscale-dev \
                libtheora-dev \
                libvorbis-dev \
                libxvidcore-dev \
                libx264-dev \
                libsqlite3-dev \
		libbz2-dev \
                yasm \
                libv4l-dev \
                libxine2-dev \
                libtbb-dev \
                libeigen3-dev \
                libffi-dev \
                libssl-dev \
                ant \
                default-jdk \
                doxygen \
                sudo \
                && \
        apt-get clean && \
        apt-get autoremove && \
        rm -rf /var/lib/apt/lists/* && \
        update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3

WORKDIR /home/VD/
CMD ["/bin/bash"]

ENV TERM=xterm \
    TZ=Europe/Berlin \
    DEBIAN_FRONTEND=noninteractive

# ensure local python is preferred over distribution python
ENV PATH /usr/local/bin:$PATH

# http://bugs.python.org/issue19846
# > At the moment, setting "LANG=C" on a Linux system *fundamentally breaks Python 3*, and that's not OK.
ENV LANG C.UTF-8

# extra dependencies (over what buildpack-deps already includes)
RUN apt-get update && apt-get install -y --no-install-recommends \
		tk-dev \
		uuid-dev \
		wget \
		curl \
		libffi-dev \
		libssl-dev \
	&& rm -rf /var/lib/apt/lists/*

ENV GPG_KEY 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D
ENV PYTHON_VERSION 3.7.3

RUN set -ex \
	\
	&& wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz" \
	&& wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc" \
	&& export GNUPGHOME="$(mktemp -d)" \
	&& gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY" \
 		|| gpg --keyserver pgp.mit.edu --recv-keys "$GPG_KEYS" \
 		|| gpg --keyserver keyserver.pgp.com --recv-keys "$GPG_KEYS" \
	&& gpg --batch --verify python.tar.xz.asc python.tar.xz \
	&& { command -v gpgconf > /dev/null && gpgconf --kill all || :; } \
	&& rm -rf "$GNUPGHOME" python.tar.xz.asc \
	&& mkdir -p /usr/src/python \
	&& tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz \
	&& rm python.tar.xz \
	\
	&& cd /usr/src/python \
	&& gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
	&& ./configure \
		--build="$gnuArch" \
		--enable-loadable-sqlite-extensions \
		--enable-shared \
		--with-system-expat \
		--with-system-ffi \
		--without-ensurepip \
	&& make -j "$(nproc)" \
	&& make install \
	&& ldconfig \
	\
	&& find /usr/local -depth \
		\( \
			\( -type d -a \( -name test -o -name tests \) \) \
			-o \
			\( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
		\) -exec rm -rf '{}' + \
	&& rm -rf /usr/src/python \
	\
	&& python3 --version

# make some useful symlinks that are expected to exist
RUN cd /usr/local/bin \
	&& ln -s idle3 idle \
	&& ln -s pydoc3 pydoc \
	&& ln -s python3 python \
	&& ln -s python3-config python-config

# if this is called "PIP_VERSION", pip explodes with "ValueError: invalid truth value '<VERSION>'"
ENV PYTHON_PIP_VERSION 19.1.1

RUN set -ex; \
	\
	wget -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \
	\
	python get-pip.py \
		--disable-pip-version-check \
		--no-cache-dir \
		"pip==$PYTHON_PIP_VERSION" \
	; \
	pip --version; \
	\
	find /usr/local -depth \
		\( \
			\( -type d -a \( -name test -o -name tests \) \) \
			-o \
			\( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
		\) -exec rm -rf '{}' +; \
	rm -f get-pip.py


RUN python3 -V
RUN pip3 install --upgrade pip

# Install other useful Python packages using pip
RUN pip3 --no-cache-dir install --upgrade ipython && \
	pip3 --no-cache-dir install \
                numpy \
		scipy \
		nose \
		h5py \
 		matplotlib \
		pandas \
		sklearn \
		Cython \
		ipykernel \
		jupyter \
		path.py \
		Pillow \
		pygments \
		six \
		sphinx \
		wheel \
		zmq \
		gensim \
		dill \
		&& \
	python3 -m ipykernel.kernelspec 


# Install Theano and set up Theano config (.theanorc) for CUDA and OpenBLAS
RUN pip3 --no-cache-dir install git+git://github.com/Theano/Theano.git@${THEANO_VERSION} && \
	\
	echo "[global]\ndevice=gpu\nfloatX=float32\noptimizer_including=cudnn\nmode=FAST_RUN \
		\n[lib]\ncnmem=0.95 \
		\n[nvcc]\nfastmath=True \
		\n[blas]\nldflag = -L/usr/lib/openblas-base -lopenblas \
		\n[DebugMode]\ncheck_finite=1" \
	> /root/.theanorc

# Install Tensorflow
RUN pip3 --no-cache-dir install tensorflow-gpu

# Install Keras
RUN pip3 --no-cache-dir install keras

# Install nltk
RUN pip3 --no-cache-dir install nltk

# Install Torch
RUN pip3 install torch
RUN pip3 install torchvision

# Install Allennlp
RUN pip3 install allennlp

# Install tensorboardX
RUN pip3 install tensorboardX

# Export the LUA evironment variables manually
#ENV LUA_PATH='/root/.luarocks/share/lua/5.1/?.lua;/root/.luarocks/share/lua/5.1/?/init.lua;/root/torch/install/share/lua/5.1/?.lua;/root/torch/install/share/lua/5.1/?/init.lua;./?.lua;/root/torch/install/share/luajit-2.1.0-beta1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua' \
#	LUA_CPATH='/root/.luarocks/lib/lua/5.1/?.so;/root/torch/install/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so' \
#	PATH=/root/torch/install/bin:$PATH \
#	LD_LIBRARY_PATH=/root/torch/install/lib:$LD_LIBRARY_PATH \
#	DYLD_LIBRARY_PATH=/root/torch/install/lib:$DYLD_LIBRARY_PATH
#ENV LUA_CPATH='/root/torch/install/lib/?.so;'$LUA_CPATH

# Install ssh-server
RUN apt update && apt install -y openssh-server

# Set up notebook config
COPY jupyter_notebook_config.py /root/.jupyter/

# Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062
COPY run_jupyter.sh /root/

# Expose Ports for TensorBoard (6006), Ipython (8888)
EXPOSE 6006 8888 

